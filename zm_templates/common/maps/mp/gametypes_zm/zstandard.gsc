// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include maps\mp\_utility;
#include maps\mp\gametypes_zm\_hud_util;
#include common_scripts\utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\gametypes_zm\_zm_gametype;
#include maps\mp\zombies\_zm_stats;
#include maps\mp\zombies\_zm_ai_dogs;
#include maps\mp\zombies\_zm;

#include maps\mp\zombies\_zm_magicbox;

main()
{
	maps\mp\gametypes_zm\_zm_gametype::main();
	level.onprecachegametype = ::onprecachegametype;
	level.onstartgametype = ::onstartgametype;
	level._game_module_custom_spawn_init_func = ::custom_spawn_init_func;
	level._game_module_stat_update_func = ::survival_classic_custom_stat_update;
}

onprecachegametype()
{
	level.playersuicideallowed = 1;
	level.canplayersuicide = ::canplayersuicide;
	level.suicide_weapon = "death_self_zm";
	precacheitem( "death_self_zm" );
	// maps\mp\zombies\_zm_ai_dogs::init();
	if ( isdefined( level.precachecustomcharacters ) )
		self [[ level.precachecustomcharacters ]]();
}

onstartgametype()
{
	maps\mp\gametypes_zm\_zm_gametype::setup_classic_gametype();
	//level thread game_objects_allowed( get_gamemode_var( "mode" ), get_gamemode_var( "location" ) );
	level thread zstandard_main();
}

zstandard_main()
{
	maps\mp\gametypes_zm\_zm_gametype::setup_standard_objects( level.default_start_location );
	//level.chests = getstructarray( "treasure_chest_use", "targetname" );
	//treasure_chest_init( "start_chest" );
	level.dog_rounds_allowed = getgametypesetting( "allowdogs" );

	// if ( level.dog_rounds_allowed )
	// 	maps\mp\zombies\_zm_ai_dogs::enable_dog_rounds();

	flag_wait( "start_zombie_round_logic" );
	level thread maps\mp\zombies\_zm::round_start();
	level thread maps\mp\gametypes_zm\_zm_gametype::kill_all_zombies();
}

custom_spawn_init_func()
{
	array_thread( level.zombie_spawners, ::add_spawn_function, maps\mp\zombies\_zm_spawner::zombie_spawn_init );
	array_thread( level.zombie_spawners, ::add_spawn_function, level._zombies_round_spawn_failsafe );
}

survival_classic_custom_stat_update()
{

}